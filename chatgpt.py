import openai
from dotenv import load_dotenv
import os

# Assistant Class for ChatGPT API
# https://platform.openai.com/docs/guides/chat/introduction

class Assistant():

    # Initialization
    def __init__(self, system_message = None, user_message = None, assistant_message = None):
        self.api_key = None
        # The system message helps set the behavior of the assistant.
        self.system_message = system_message
        # The user messages help instruct the assistant. They can be generated by the end users of an application, or set by a developer as an instruction.
        self.user_message = user_message
        # The assistant messages help store prior responses. They can also be written by a developer to help give examples of desired behavior.
        self.assistant_message = assistant_message

    def get_api_key(self):
        load_dotenv()
        self.api_key = os.environ.get("api-key-openai")
    
    def send_message(self, input_message):

        # Get API Key if it is not defined yet
        if not self.api_key:
            self.api_key = self.get_api_key()

        # Define the message for the API call
        message = []
        if self.system_message:
            message.append({"role": "system", "content": self.system_message })
        if self.user_message:
            message.append({"role": "user", "content": self.user_message })
        if self.assistant_message:          
            message.append({"role": "assistant", "content": self.assistant_message })
        message.append({"role": "user", "content": input_message })

        # Actual API call
        openai.api_key = self.api_key
        response = openai.ChatCompletion.create(
            model = "gpt-3.5-turbo",
            messages = message
        )

        # Retrieve Results
        result = ''
        for choice in response.choices:
            result += choice.message.content

        return result